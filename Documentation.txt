Документация по проекту "Система резервирования парковочных мест"

Обзор

Этот документ описывает архитектуру, алгоритмы, структуры данных и
основные компоненты системы резервирования парковочных мест. Он также
охватывает проблемы, с которыми столкнулись в процессе разработки.

1. Общая архитектура

Система имеет трехуровневую архитектуру:

1. Frontend (клиентская часть): Пользовательский интерфейс,
   реализованный на JavaFX, предоставляющий пользователям возможность
   просматривать доступные парковочные места и осуществлять бронирование.
2. Backend (серверная часть): Обрабатывает запросы от Frontend,
   управляет логикой бронирования и взаимодействует с хранилищем данных.
   Backend реализован на Java с использованием Maven для управления
   зависимостями.
3. Data Storage (хранилище данных): Для хранения информации о
   парковочных местах, пользователях и бронированиях используется JSON-файл
   (или реляционная база данных, например, MySQL, в будущих версиях).

2. Используемые алгоритмы и структуры данных

2.1. Алгоритм бронирования

1. Пользователь выбирает парковочное место и указывает время бронирования.
2. Frontend отправляет запрос на Backend.
3. Backend проверяет, доступно ли выбранное парковочное место на указанное
   время.
4. Если место доступно, Backend создает запись о бронировании и обновляет
   статус парковочного места.
5. Backend отправляет подтверждение бронирования Frontend.

2.2. Структуры данных

* ParkingSpot: Класс, представляющий парковочное место. Содержит
  информацию об ID, номере места и статусе доступности.
* Reservation: Класс, представляющий бронирование. Содержит информацию о
  пользователе, парковочном месте, времени начала и окончания бронирования.
* Массив `parkingSpots`: Используется для хранения списка всех парковочных мест.

3. Описание модулей и функций

3.1. Модуль `com.example.parkingsystemgui` (Frontend)

* `Main.java`: Точка входа в приложение. Загружает FXML-файл и
  отображает пользовательский интерфейс.
* `ParkingSystemAppController.java`: Контроллер, обрабатывающий действия
  пользователя в интерфейсе (нажатия кнопок, ввод данных). Отвечает за
  взаимодействие с Backend.
* `ParkingSystemApp.fxml`: Описывает структуру пользовательского
  интерфейса (текстовые поля, кнопки, метки).

3.2. Модуль (или классы) для Backend (если Backend реализован отдельно)

* (Пример) `ReservationService.java`: Класс, содержащий логику
  бронирования парковочных мест.
* (Пример) `ParkingSpotRepository.java`: Класс, отвечающий за доступ к
  данным о парковочных местах.

3.3. Классы данных

* `ParkingSpot.java`: Представляет парковочное место.
* `Reservation.java`: Представляет бронирование.

4. Описание наиболее сложных частей реализации

1. Реализация алгоритма бронирования: Обеспечение корректной обработки
   параллельных запросов на бронирование, чтобы избежать конфликтов и
   двойного бронирования одного и того же места. Для этого можно
   использовать механизмы синхронизации (например, `synchronized` блоки)
   или транзакции базы данных.

2. Сохранение и загрузка данных: Реализация механизмов сериализации и
   десериализации объектов `ParkingSpot` и `Reservation` для сохранения в
   JSON-файл и загрузки из него. Важно обеспечить обработку возможных
   ошибок при чтении и записи файлов. В случае использования базы данных
   необходимо настроить ORM (например, Hibernate) и обеспечить правильное
   отображение классов на таблицы.

5. Проблемы и решения

5.1. Проблема: Некорректное отображение интерфейса JavaFX

* Описание: Интерфейс JavaFX отображался некорректно (отсутствовали
  элементы, неверное расположение).
* Решение: Убедились, что используется Scene Builder той же версии, что и
  JavaFX SDK. Пересохранили FXML-файл в Scene Builder и выполнили
  "Maven: Clean" и "Maven: Install".

5.2. Проблема: Ошибка компиляции из-за несовместимости конструктора
   `ParkingSpot`

* Описание: Ошибка компиляции "constructor ParkingSpot in class
  ParkingSpot cannot be applied to given types".
* Решение: Добавили конструктор без аргументов в класс `ParkingSpot`.

5.3. Проблема: Некорректная работа с данными о бронировании (в будущих
   версиях)

* Описание: Проблемы с сохранением и загрузкой данных о бронировании из
  JSON-файла (или базы данных).
* Решение: Использовать библиотеки для сериализации и десериализации JSON
  (например, Gson). В случае базы данных - настроить ORM и проверить
  корректность маппинга классов на таблицы.

6. Заключение

Данная документация предоставляет общее понимание архитектуры и реализации
системы резервирования парковочных мест. Этот проект служит основой для
расширения функциональности, включая интеграцию с онлайн-платежами,
мобильными приложениями и системами распознавания номеров.